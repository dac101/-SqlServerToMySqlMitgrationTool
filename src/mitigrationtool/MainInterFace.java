/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mitigrationtool;

import generate.SyntaxRule;
import file.manipulation.FileOperations;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import reserved.word.ReservedWords;
import token.Token;
import token.Tokenization;
import validation.Validation;

/**
 *
 * @author dacorie
 */
public class MainInterFace extends javax.swing.JFrame {

    Validation validation = new Validation();
    FileOperations file = new FileOperations();
    ReservedWords reservedWords = new ReservedWords();
    Tokenization tokenization = new Tokenization();

    String pathMysqlKeyowrd = "C:/Users/dacorie/Documents/JavaProject/SqlServerToMySqlMitgrationTool/src/assets/mysqlKeywords.txt";
    String pathSqlServerKeyowrd = "C:/Users/dacorie/Documents/JavaProject/SqlServerToMySqlMitgrationTool/src/assets/SqlServerKeywords.txt";
    String sqlFile = "";
    String sqlSourceFile = "";
    ArrayList<Token> createSourceCodeTokens;
    String sourceFileWithOutComments;
    ArrayList<String> sqlSourceFileWithoutComments;
    ArrayList<String> commonWords;
    ArrayList<String> subtractValuesFromListSQL;

    /**
     * Creates new form MainInterFace
     */
    public void intializeVariable() {
        reservedWords.initialization(file, reservedWords, pathMysqlKeyowrd, pathSqlServerKeyowrd);
        commonWords = reservedWords.createCommonWords(reservedWords.getMySqlKeyword(), reservedWords.getSQlServerKeyWord());
        reservedWords.setCommonWords(commonWords);
        subtractValuesFromListSQL = reservedWords.subtractValuesFromList(reservedWords.getSQlServerKeyWord(), commonWords);
    }

    public MainInterFace() {

        initComponents();
        intializeVariable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        optimizationBtn = new javax.swing.JButton();
        selectFilebtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        sqlServerSourceCodetxt = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        mysqlSoucreCode = new javax.swing.JTextArea();
        conversionBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        ClearBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        optimizationBtn.setText("Mysql To Sql Server");
        optimizationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optimizationBtnActionPerformed(evt);
            }
        });

        selectFilebtn.setText("Select FIle");
        selectFilebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFilebtnActionPerformed(evt);
            }
        });

        sqlServerSourceCodetxt.setColumns(20);
        sqlServerSourceCodetxt.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        sqlServerSourceCodetxt.setRows(5);
        jScrollPane1.setViewportView(sqlServerSourceCodetxt);

        mysqlSoucreCode.setColumns(20);
        mysqlSoucreCode.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        mysqlSoucreCode.setRows(5);
        jScrollPane2.setViewportView(mysqlSoucreCode);

        conversionBtn.setText("Sql Server To MySql");
        conversionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conversionBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("SqlServer To MySql Converison Tool");
        jLabel1.setToolTipText("");

        ClearBtn.setText("Clear");
        ClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(239, 239, 239)
                        .addComponent(selectFilebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(optimizationBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(conversionBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addComponent(ClearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(29, 29, 29)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(453, 453, 453)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(conversionBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(optimizationBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(ClearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(86, 86, 86)))
                .addComponent(selectFilebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void optimizationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optimizationBtnActionPerformed
        // TODO add your handling code here:
        SyntaxRule syntaxRule = new SyntaxRule();
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(null);
        String wtv = "";
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            sqlFile = selectedFile.getAbsolutePath();

            if (validation.checkIfFileExtensionIsSql(sqlFile, "sql")) {

                LinkedList<String> stringList = new LinkedList<String>();

                sqlSourceFile = file.readFileToString(sqlFile);
                //List<String> items = Arrays.asList(sqlSourceFile.split(";"));
                sqlSourceFile = file.readFileToString(sqlFile);

                sqlServerSourceCodetxt.setText("");

                String[] sourceCodeSplit = sqlSourceFile.split(",");
                for (String x : sourceCodeSplit) {
                    if (x.toLowerCase().contains("primary key")) {
                        sqlServerSourceCodetxt.setText(sqlServerSourceCodetxt.getText() + " " + x + "\n");
                    } else {
                        sqlServerSourceCodetxt.setText(sqlServerSourceCodetxt.getText() + " " + x + " ," + "\n");
                    }
                }

                try {
                    Scanner scn = new Scanner(selectedFile);

                    FileWriter writer = new FileWriter("./src/assets/output.sql");
                    while (scn.hasNextLine()) {
                        String i = scn.nextLine();//optimize
                        //test for language rules
                        //replace comments
                        i = i.toLowerCase();
                        if (i.startsWith("--") || i.contentEquals("")) {
                            continue;
                        }

                        //Swap keywords                        
                        if (i.contains("if exists")) {
                            continue;
                        }
                        if (i.contains("insert")) {
                            System.out.println("");
                        }
                        /*if(i.contains("auto_increment"))
                         i = i.replace("auto_increment", "identity(1,1)");*/
                        if (i.contains("auto_increment")) {
                            i = i.replace("auto_increment", "");
                        }
                        if (i.contains("unsigned")) {
                            i = i.replace("unsigned", "");
                        }
                        if (i.contains("bool")) {
                            i = i.replace("bool", "varchar(4)");
                        }
                        if (i.contains("set autocommit=0;")) {
                            i = i.replace("set autocommit=0;", "");
                        }
                        if (i.contains("engine=innodb default charset=utf8")) {
                            i = i.replace("engine=innodb default charset=utf8", "");
                        }
                        if (i.contains("create schema ")) {
                            i = i.replace("create schema ", "create database");
                        }
                        if (i.contains("timestamp not null default current_timestamp on update current_timestamp")) {
                            i = i.replace("timestamp not null default current_timestamp on update current_timestamp", "timestamp");
                        }
                        if (i.contains("n'")) {
                            i = i.replace("n'", "N'");
                        }

                        //remove key
                        /*if(!(i.contains("primary key")||i.contains("foreign key"))){
                         if(i.contains("key "))
                         continue;
                         }*/
                        writer.write(i + System.getProperty("line.separator"));
                        wtv = wtv + i + System.getProperty("line.separator");

                        //System.out.println(i);
                    }

                    scn.close();
                    writer.close();

                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                String[] d = wtv.split(",");
                for (String x : d) {
                    if (x.toLowerCase().contains("primary key")) {
                        mysqlSoucreCode.setText(mysqlSoucreCode.getText() + " " + x + "\n");
                    } else {
                        mysqlSoucreCode.setText(mysqlSoucreCode.getText() + " " + x + " ," + "\n");
                    }
                }
                /*// if (validation.checkIfEqualAmountOfsemeilcon(sqlSourceFile)) {

                 String databaseName = syntaxRule.getDatabaseNameFromMySqlServerFile(sqlFile);
                 syntaxRule.databaseName = databaseName;

                 sqlSourceFile = syntaxRule.removeAlterDatabaseStatements(sqlSourceFile, databaseName);
                 sqlSourceFile = syntaxRule.replaceSQLServerSymbols(sqlSourceFile);
                 sqlSourceFile = syntaxRule.CreateDatabaseStatement(sqlSourceFile, databaseName);

                 //validation.checkIfEqualInsertValues(sqlSourceFile);
                    
                 // ArrayList<Token> createSourceCodeTokens = tokenization.createSourceCodeTokens(sqlSourceFile);
                 //validation.checkIfInsertToken(createSourceCodeTokens);
                    
                 sourceFileWithOutComments = sqlSourceFile;

                 String[] sourceCodeSplit = sourceFileWithOutComments.split(",");
                 for (String x : sourceCodeSplit) {
                 if (x.toLowerCase().contains("primary key")) {
                 sqlServerSourceCodetxt.setText(sqlServerSourceCodetxt.getText() + " " + x + "\n");
                 } else {
                 sqlServerSourceCodetxt.setText(sqlServerSourceCodetxt.getText() + " " + x + " ," + "\n");
                 }
                 }*/
                //  }
            } else {
                JOptionPane.showMessageDialog(null,
                        "Wrong file Type! Please Enter a file type",
                        "File Type Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_optimizationBtnActionPerformed

    private void selectFilebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFilebtnActionPerformed
        // TODO add your handling code here:
        SyntaxRule syntaxRule = new SyntaxRule();
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(null);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            sqlFile = selectedFile.getAbsolutePath();

            if (validation.checkIfFileExtensionIsSql(sqlFile, "sql")) {

                sqlSourceFile = file.readFileToString(sqlFile);
          //  boolean test =    validation.checkIfEqualAmountOfbraces(sqlSourceFile);

                // if (validation.checkIfEqualAmountOfsemeilcon(sqlSourceFile)) {
                String databaseName = syntaxRule.getDatabaseNameFromMySqlServerFile(sqlFile);
                syntaxRule.databaseName = databaseName;

                sqlSourceFile = syntaxRule.removeAlterDatabaseStatements(sqlSourceFile, databaseName);
                sqlSourceFile = syntaxRule.replaceSQLServerSymbols(sqlSourceFile);
                sqlSourceFile = syntaxRule.CreateDatabaseStatement(sqlSourceFile, databaseName);

                //validation.checkIfEqualInsertValues(sqlSourceFile);
                // ArrayList<Token> createSourceCodeTokens = tokenization.createSourceCodeTokens(sqlSourceFile);
                //validation.checkIfInsertToken(createSourceCodeTokens);
                sourceFileWithOutComments = sqlSourceFile;

                String[] sourceCodeSplit = sourceFileWithOutComments.split(",");
                for (String x : sourceCodeSplit) {
                    if (x.toLowerCase().contains("primary key")) {
                        sqlServerSourceCodetxt.setText(sqlServerSourceCodetxt.getText() + " " + x + "\n");
                    } else {
                        sqlServerSourceCodetxt.setText(sqlServerSourceCodetxt.getText() + " " + x + " ," + "\n");
                    }
                }
                //  }
            } else {
                JOptionPane.showMessageDialog(null,
                        "Wrong file Type! Please Select A file Type ",
                        "File Type Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_selectFilebtnActionPerformed

    private void conversionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conversionBtnActionPerformed
        // TODO add your handling code here:
        try {    if (Validation.validationTypeOfSQL(sourceFileWithOutComments, tokenization, subtractValuesFromListSQL) == true) {
            //System.out.println("this is Sql Server");
            SyntaxRule rule = new SyntaxRule();

            ArrayList<Token> createSourceCodeTokens = tokenization.createSourceCodeTokens(sourceFileWithOutComments);
            if (Validation.tokenValidation(createSourceCodeTokens) == true) {
                createSourceCodeTokens = rule.replaceSQLServerFunctions(createSourceCodeTokens);
                createSourceCodeTokens = rule.replaceSQLServerDataType(createSourceCodeTokens);

                for (int i = 0; i < createSourceCodeTokens.size(); i++) {
                    createSourceCodeTokens.get(i).setToken(rule.changeForiegnKey(createSourceCodeTokens.get(i)));
                }
                file.writeToFile("result.sql", createSourceCodeTokens, "C:/Users/dacorie/Documents/JavaProject/SqlServerToMySqlMitgrationTool/src/assets/");

                String list = "";
                for (Token x : createSourceCodeTokens) {
                    list += x.getToken();
                }
                String[] listArray = list.split(",");

                for (String x : listArray) {
                    mysqlSoucreCode.setText((mysqlSoucreCode.getText() + " " + x + "," + "\n").replace(";,", ";"));

                }

                JOptionPane.showMessageDialog(null,
                        "File Conversation Was successfull",
                        "Successs",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null,
                    "Not Sql Server File ",
                    "This is not Sql Server File",
                    JOptionPane.WARNING_MESSAGE);
        }
        } catch (Exception ex) {
               JOptionPane.showMessageDialog(null,
                    "Not Sql Server File ",
                    "This is not Sql Server File",
                    JOptionPane.WARNING_MESSAGE);
        }
    
    }//GEN-LAST:event_conversionBtnActionPerformed

    private void ClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearBtnActionPerformed
        mysqlSoucreCode.setText("");
        sqlServerSourceCodetxt.setText("");
    }//GEN-LAST:event_ClearBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainInterFace().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ClearBtn;
    private javax.swing.JButton conversionBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea mysqlSoucreCode;
    private javax.swing.JButton optimizationBtn;
    private javax.swing.JButton selectFilebtn;
    private javax.swing.JTextArea sqlServerSourceCodetxt;
    // End of variables declaration//GEN-END:variables
}
